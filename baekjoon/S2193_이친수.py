'''
0과 1로 이루어진 수 중
1. 1로 시작하는 수
2. 1이 연속으로 나타나지 않는 수
위 두 조건을 만족하는 수를 이친수라고 한다.
자리수 n 이 주어졌을 때, n자리 이친수의 갯수를 출력하라.

이친수는
                   1
            10         11
        100   101   110   111
위와 같이 분화해 나간다.
1로 끝나는 이친수는 한자리 수 증가했을 때, 0만 추가 될 수 있지만,
0으로 끝나는 경우에는 한자리 수 증가 할때, 0 또는 1이 추가 될 수 있다.
따라서 이친수는 한 자리수 증가할 때 마다, 0의 자리는 이전 자리수 이친수 중 (0으로 끝나는 이친수의 갯수) + (1로 끝나는 이친수의 갯수)를 갖게되고,
                                1의 자리는 이전 자리수 이친수 중 0으로 끝나는 이친수의 갯수를 갖게 된다.
'''

length = int(input())  # 자리수 n을 length 변수에 저장

prinaryNumbers = [[0, 1]]  # 첫 이친수인 1의 0으로 끝나는 수는 0개, 1로 끝나는 수는 1개이다.

for i in range(1, length):  # 1부터 length까지 반복
    prinaryNumbers.append([])  # 새로운 리스트를 추가한다.
    prinaryNumbers[i].append(prinaryNumbers[i - 1][0] + prinaryNumbers[i - 1][
        1])  # 이전 자리의 0으로 끝나는 이친수의 갯수와, 1로 끝나는 이친수의 갯수의 합을, 현재 자리수의 이친수의 0으로 끝나는 이친수의 갯수로 한다.
    prinaryNumbers[i].append(prinaryNumbers[i - 1][0])  # 이전 자리의 0으로 끝나는 이친수의 갯수를 현재 자리수의 이친수의 갯수로 한다.

print(sum(prinaryNumbers[length - 1]))  # 해당 자리수의 이친수 갯수를 출력한다.
