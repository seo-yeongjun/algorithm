'''
112 113 123 과 같은 인접한 수가 같거나 커지는 수를 오르막 수라고 할때
입력 length 자리 수에는 몇개의 오르막 수가 있는지 구하는 문제이다.
0으로 시작하는 수도 포함한다.

이때 각 자리가 증가할 때마다 9의 경우에는 99 999 와 같이 항한 한개로 고정 된다.
0의 경우 이전 자리 수 의 합이 계단수의 갯 수가 된다.
1 ~ 8 까지는 예시를 1로 들자면 이전 자리 수의 2~9까지를 합한 값이 된다.
'''

countList = [[1] * 10]  # 1의 자리수 일때 0~9 모두 계단 수는 1개 임으로 [1]* 10
length = int(input()) # 자리 수를 입력 받는다.
count = 1 # 입력 받은 자리 수의 계단수 갯수를 저장하기 위한 변수
for i in range(1, length): # 원하는 자리 수 까지 반복
    countList.append([1] * 10) # 새로운 리스트를 추가해 준다.
    for j in range(9, -1, -1): # 9~0 index를 돌기위한 반복문
        if j == 9: #9 인경우는 9, 99 ... 계단수가 무조건 한개임으로 continue
            continue
        else: # 나머지 경우
            countList[i][j] = (countList[i][j + 1] + countList[i - 1][j]) % 10007 # 이전 자리 수의 현재 인덱스 까지의 합을 저장
            if i == length - 1: # 구하려는 자리 수에 도달 한 경우 해당 값들을 count 해준다.
                count += countList[i][j] % 10007
if length == 1: # 1의 자리 수의 경우
    print(10) # 출력
else: # 나머지 경우
    print(count % 10007) # count한 갯수 출력
